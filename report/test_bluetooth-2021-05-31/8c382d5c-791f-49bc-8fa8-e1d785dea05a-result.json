{"name": "蓝牙长按连接测试", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "args = (<bluetooth.test_bluetooth.Test_Bluetooth object at 0x000001814A8BBB00>,)\nkwargs = {'fixture_start_app': <appium.webdriver.webdriver.WebDriver (session=\"c483f6bd-40af-4b09-822c-7c64a7446d69\")>}\n\n    @wraps(func)\n    def wrapper(*args,**kwargs):\n        try:\n>           func(*args,**kwargs)\n\ncommon\\public.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <bluetooth.test_bluetooth.Test_Bluetooth object at 0x000001814A8BBB00>\nfixture_start_app = <appium.webdriver.webdriver.WebDriver (session=\"c483f6bd-40af-4b09-822c-7c64a7446d69\")>\n\n    @allure.story(\"用例--蓝牙长按连接\")\n    @allure.description(\"该用例是蓝牙长按连接功能测试\")\n    @allure.title('蓝牙长按连接测试')\n    @level_('HIGH')\n    @assert_testcase\n    def test_long_press_connect(self,fixture_start_app):\n        driver=fixture_start_app\n        app=element_operate(driver)\n        app.click_element(loc=Main.bluetooth_sign,info='主页面')\n        app.press_element(loc=Bluetooth.bluetooth_number,info='蓝牙连接界面')\n        app.click_element(loc=Bluetooth.long_press_connect,info='蓝牙连接界面')\n>       app.get_element_toast(loc=Bluetooth.bluetooth_connect_success, info='蓝牙连接成功')\n\ntestcase\\bluetooth\\test_bluetooth.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.element_operate.element_operate object at 0x000001814A903400>\nloc = ('xpath', \"//*[@text='连接成功']\"), info = '蓝牙连接成功'\n\n    def get_element_toast(self,loc,info):\n        \"\"\"\n        获取toast信息操作\n        :param loc: 元素\n        :param info: 所在页面\n        :return:\n        \"\"\"\n        try:\n            WebDriverWait(self.driver,10,0.5).until(lambda x:x.find_element(*loc))\n        except Exception as e:\n            logger.error(f'{[info]} 页面的元素{loc}找不到，原因是{e}')\n>           raise e\n\ncommon\\element_operate.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.element_operate.element_operate object at 0x000001814A903400>\nloc = ('xpath', \"//*[@text='连接成功']\"), info = '蓝牙连接成功'\n\n    def get_element_toast(self,loc,info):\n        \"\"\"\n        获取toast信息操作\n        :param loc: 元素\n        :param info: 所在页面\n        :return:\n        \"\"\"\n        try:\n>           WebDriverWait(self.driver,10,0.5).until(lambda x:x.find_element(*loc))\n\ncommon\\element_operate.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c483f6bd-40af-4b09-822c-7c64a7446d69\")>\nmethod = <function element_operate.get_element_toast.<locals>.<lambda> at 0x000001814A8F9D90>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nargs = (<bluetooth.test_bluetooth.Test_Bluetooth object at 0x000001814A8BBB00>,)\nkwargs = {'fixture_start_app': <appium.webdriver.webdriver.WebDriver (session=\"c483f6bd-40af-4b09-822c-7c64a7446d69\")>}\n\n    @wraps(func)\n    def inner_wrapper(*args, **kwargs):\n        logger.info(f\"{[func.__name__]}--level-->{[level]}\")\n>       return func(*args, **kwargs)\n\ncommon\\public.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (<bluetooth.test_bluetooth.Test_Bluetooth object at 0x000001814A8BBB00>,)\nkwargs = {'fixture_start_app': <appium.webdriver.webdriver.WebDriver (session=\"c483f6bd-40af-4b09-822c-7c64a7446d69\")>}\n\n    @wraps(func)\n    def wrapper(*args,**kwargs):\n        try:\n            func(*args,**kwargs)\n        except Exception as e:\n            logger.error(f'{[func.__name__]}测试用例运行失败，原因是{e}')\n>           assert(False)\nE           AssertionError\n\ncommon\\public.py:128: AssertionError"}, "description": "该用例是蓝牙长按连接功能测试", "attachments": [{"name": "失败截图", "source": "1f7ae072-40cd-4ba5-afa5-e5f62e19af1e-attachment.png", "type": "image/png"}, {"name": "log", "source": "29c7b990-798e-4f85-928b-0078893b63cf-attachment.txt", "type": "text/plain"}], "start": 1622431455506, "stop": 1622431473674, "uuid": "8908308c-7763-4205-a48c-7aff0337132a", "historyId": "f416413549267a38f9169b7d63fc481c", "testCaseId": "0955c9340a79cb9db576148ec8d2fc5f", "fullName": "testcase.bluetooth.test_bluetooth.Test_Bluetooth#test_long_press_connect", "labels": [{"name": "story", "value": "用例--蓝牙长按连接"}, {"name": "feature", "value": "蓝牙正常连接"}, {"name": "epic", "value": "蓝牙连接测试"}, {"name": "severity", "value": "trivial"}, {"name": "parentSuite", "value": "testcase.bluetooth"}, {"name": "suite", "value": "test_bluetooth"}, {"name": "subSuite", "value": "Test_Bluetooth"}, {"name": "host", "value": "DESKTOP-9QI7SSI"}, {"name": "thread", "value": "10904-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.bluetooth.test_bluetooth"}]}