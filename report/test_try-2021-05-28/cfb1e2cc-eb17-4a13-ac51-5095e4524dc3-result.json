{"name": "test_try", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "args = (<bluetooth.test_try.Test_try object at 0x000001DDA5C6C9B0>,)\nkwargs = {'fixture_ready': <appium.webdriver.webdriver.WebDriver (session=\"242f4e41-aaa9-4e99-8f61-884cad78a8b6\")>}\n\n    @wraps(func)\n    def wrapper(*args,**kwargs):\n        try:\n>           func(*args,**kwargs)\n\ncommon\\public.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <bluetooth.test_try.Test_try object at 0x000001DDA5C6C9B0>\nfixture_ready = <appium.webdriver.webdriver.WebDriver (session=\"242f4e41-aaa9-4e99-8f61-884cad78a8b6\")>\n\n    @assert_testcase\n    def test_try(self,fixture_ready):\n        self.driver=fixture_ready\n        #data_report(path='C:/Users/lisijie/PycharmProjects/起爆器APP测试/data/test_data.xlsx')\n        #element_operate(self.driver).start_recording_screen('test')\n>       bluetooth_section(self.driver).bluetooth_connect()\n\ntestcase\\bluetooth\\test_try.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <operate.bluetooth_section.bluetooth_section object at 0x000001DDA5C97EF0>\n\n    def bluetooth_connect(self):\n        self.click_element(loc=MAIN.bluetooth_sign, info='MAIN')\n        self.click_element(loc=BLUETOOTH.bluetooth_number, info='BLUETOOTH')\n>       self.get_element_toast(loc=BLUETOOTH.bluetooth_connect_success, info='BLUETOOTH')\n\noperate\\bluetooth_section.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <operate.bluetooth_section.bluetooth_section object at 0x000001DDA5C97EF0>\nloc = ('xpath', \"//*[@text='连接成功']\"), info = 'BLUETOOTH'\n\n    def get_element_toast(self,loc,info):\n        try:\n            WebDriverWait(self.driver,10,0.5).until(lambda x:x.find_element(*loc))\n        except Exception as e:\n            self.screen_shot(info)\n            logger.error(f'{[info]} 页面的元素{loc}找不到，原因是{e}')\n>           raise e\n\ncommon\\element_operate.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <operate.bluetooth_section.bluetooth_section object at 0x000001DDA5C97EF0>\nloc = ('xpath', \"//*[@text='连接成功']\"), info = 'BLUETOOTH'\n\n    def get_element_toast(self,loc,info):\n        try:\n>           WebDriverWait(self.driver,10,0.5).until(lambda x:x.find_element(*loc))\n\ncommon\\element_operate.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"242f4e41-aaa9-4e99-8f61-884cad78a8b6\")>\nmethod = <function element_operate.get_element_toast.<locals>.<lambda> at 0x000001DDA5CC6048>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nargs = (<bluetooth.test_try.Test_try object at 0x000001DDA5C6C9B0>,)\nkwargs = {'fixture_ready': <appium.webdriver.webdriver.WebDriver (session=\"242f4e41-aaa9-4e99-8f61-884cad78a8b6\")>}\n\n    @wraps(func)\n    def wrapper(*args,**kwargs):\n        try:\n            func(*args,**kwargs)\n        except Exception as e:\n            logger.error(f'{[func.__name__]}测试用例运行失败，原因是{e}')\n>           assert(False)\nE           AssertionError\n\ncommon\\public.py:128: AssertionError"}, "attachments": [{"name": "失败截图", "source": "58da36af-72a6-4efd-805d-08be4bf3a16d-attachment.png", "type": "image/png"}, {"name": "log", "source": "4dbfb49d-8a39-42bc-8c9a-e28d620229dd-attachment.txt", "type": "text/plain"}], "start": 1622192068101, "stop": 1622192082970, "uuid": "6a0e0aa4-ee7e-493b-923c-3740fe5e7272", "historyId": "f102ab2857c7b452ef233a4d1e8f550f", "testCaseId": "84d4166ad1d93d17f702a572aef3ee3a", "fullName": "testcase.bluetooth.test_try.Test_try#test_try", "labels": [{"name": "parentSuite", "value": "testcase.bluetooth"}, {"name": "suite", "value": "test_try"}, {"name": "subSuite", "value": "Test_try"}, {"name": "host", "value": "DESKTOP-9QI7SSI"}, {"name": "thread", "value": "20220-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.bluetooth.test_try"}]}